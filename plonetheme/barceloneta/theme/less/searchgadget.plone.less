//*// SEARCHGADGET //*//

input[type="text"]#searchGadget {
  background-color: transparent;
  top: 0px;
  position: absolute;
  .box-shadow(none);
  border:none;
}
#searchGadget_form .glyphicon{
  position: absolute;
  top: 10px;
  right: 34px;
  color: @plone-gray-lighter;
}
.inner-addon.left-addon{
  width: 90%;
  height: @plone-input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @plone-padding-base-vertical @plone-padding-base-horizontal;
  font-size: @plone-font-size-base;
  line-height: @plone-line-height-base;
  background-color: @plone-input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @plone-input-border;
  border-radius: @plone-input-border-radius;
  .box-shadow(none);
  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

  // Customize the `:focus` state to imitate native WebKit styles.
  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    cursor: not-allowed;
    background-color: @plone-input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content
  }
}
